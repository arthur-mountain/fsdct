version: "3.8"

x-database-variables: &database-env
  MYSQL_DATABASE: ${MYSQL_DATABASE}
  MYSQL_USER: ${MYSQL_USER}
  MYSQL_PASSWORD: ${MYSQL_PASSWORD}

x-exec-settings: &exec-settings
  stdin_open: true
  tty: true

services:
  frontend:
    build:
      context: client
      dockerfile: ./dockers/Dockerfile # 以 context 的值來指定 dockerfile 的相對路徑. 而 dockerfile 內則以 context 為基礎路徑進行配置
    container_name: frontend
    env_file: .env
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    volumes:
      - ./client:/app/client
    networks:
      - frontend
    depends_on:
      - backend
    restart: unless-stopped
    <<: *exec-settings

  backend:
    build:
      context: server
      dockerfile: ./dockers/Dockerfile # 以 context 的值來指定 dockerfile 的相對路徑. 而 dockerfile 內則以 context 為基礎路徑進行配置
    container_name: backend
    env_file: .env
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - ./server:/app/server
    environment:
      MYSQL_HOST: ${MYSQL_HOST}
      <<: *database-env
    networks:
      - frontend
      - backend
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    <<: *exec-settings

  mysql:
    image: mysql
    container_name: mysql
    env_file: .env
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    volumes:
      - ./server/dockers/mysql/confs:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      <<: *database-env
    networks:
      - backend
    restart: unless-stopped
    # TODO: Should fixed this warning, use authentication_policy instead?
    # command: --default-authentication-plugin=mysql_native_password
    <<: *exec-settings

  redis-node1:
    image: redis:alpine
    container_name: redis-node1
    env_file: .env
    ports:
      - ${REDIS_PORT1}:${REDIS_CONTAINER_PORT}
    volumes:
      - ./server/dockers/redis/confs/node1.conf:/usr/local/etc/redis/redis.conf
    command:
      [
        "redis-server",
        "/usr/local/etc/redis/redis.conf",
        "--cluster-enabled",
        "yes",
        "--cluster-config-file",
        "nodes.conf",
        "--cluster-node-timeout",
        "5000",
        "--appendonly",
        "yes",
      ]
    networks:
      - backend
    restart: unless-stopped
    <<: *exec-settings

  redis-node2:
    image: redis:alpine
    container_name: redis-node2
    env_file: .env
    ports:
      - ${REDIS_PORT2}:${REDIS_CONTAINER_PORT}
    volumes:
      - ./server/dockers/redis/confs/node2.conf:/usr/local/etc/redis/redis.conf
    command:
      [
        "redis-server",
        "/usr/local/etc/redis/redis.conf",
        "--cluster-enabled",
        "yes",
        "--cluster-config-file",
        "nodes.conf",
        "--cluster-node-timeout",
        "5000",
        "--appendonly",
        "yes",
      ]
    networks:
      - backend
    restart: unless-stopped
    <<: *exec-settings

  redis-node3:
    image: redis:alpine
    container_name: redis-node3
    env_file: .env
    ports:
      - ${REDIS_PORT3}:${REDIS_CONTAINER_PORT}
    volumes:
      - ./server/dockers/redis/confs/node3.conf:/usr/local/etc/redis/redis.conf
    command:
      [
        "redis-server",
        "/usr/local/etc/redis/redis.conf",
        "--cluster-enabled",
        "yes",
        "--cluster-config-file",
        "nodes.conf",
        "--cluster-node-timeout",
        "5000",
        "--appendonly",
        "yes",
      ]
    networks:
      - backend
    restart: unless-stopped
    <<: *exec-settings

networks:
  frontend:
  backend:

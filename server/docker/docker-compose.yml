version: "3.8"

x-shared-settings: &shared-settings
  env_file: ./server/.env
  restart: unless-stopped
  stdin_open: true
  tty: true

# - `build.context`
#   - 相對於執行 docker-compose 指令時的路徑
# - `build.dockerfile`
#   - 相對於 context 的路徑值，以此路徑來指定 dockerfile ，而 dockerfile 內則以 context 為基礎路徑進行配置
# - `networks`
#   - 在 docker-compose.network 預計要先被啟動，不然會報錯。
services:
  backend:
    <<: *shared-settings
    build:
      context: server
      dockerfile: docker/Dockerfile
    container_name: backend
    ports:
      - $BACKEND_PORT:$BACKEND_PORT
    volumes:
      - ./server/src:/app/server/src
    networks:
      - frontend
      - backend
    depends_on:
      # - postgres
      - redis-node1

  # postgres:
  #   <<: *shared-settings
  #   build:
  #     context: server
  #     dockerfile: docker/postgresql/Dockerfile
  #     args:
  #       POSTGRES_IMAGE: $POSTGRES_IMAGE
  #   container_name: $POSTGRES_HOST
  #   volumes:
  #     - ./server/docker/postgresql/data:/data
  #   ports:
  #     - $POSTGRES_PORT:$POSTGRES_CONTAINER_PORT
  #   networks:
  #     - backend

  redis-node1:
    <<: *shared-settings
    container_name: $REDIS_HOST1
    image: $REDIS_IMAGE
    volumes:
      - ./server/docker/redis/data/node1:/data
    ports:
      - $REDIS_PORT1:$REDIS_PORT1
    networks:
      - backend
    depends_on:
      - redis-node2
      - redis-node3
      - redis-node4
      - redis-node5
      - redis-node6
    command: >
      sh -c 'redis-server \
        --requirepass $REDIS_PASSWORD \
        --masterauth $REDIS_PASSWORD \
        --port $REDIS_PORT1 \
        --cluster-enabled yes \
        --cluster-node-timeout 5000 \
        --appendonly yes &

        until redis-cli -h $REDIS_HOST1 -p $REDIS_PORT1 -a $REDIS_PASSWORD ping | grep PONG > /dev/null; do
          echo "[fsdct]: Waiting for $REDIS_HOST1 to be ready..."
          sleep 1
        done

        echo "[fsdct]: Creating cluster..."
        echo "yes" | redis-cli \
          -a $REDIS_PASSWORD \
          --cluster-replicas 1 \
          --cluster create \
          $REDIS_HOST1:$REDIS_PORT1 \
          $REDIS_HOST2:$REDIS_PORT2 \
          $REDIS_HOST3:$REDIS_PORT3 \
          $REDIS_HOST4:$REDIS_PORT4 \
          $REDIS_HOST5:$REDIS_PORT5 \
          $REDIS_HOST6:$REDIS_PORT6
        wait
      '

  redis-node2:
    <<: *shared-settings
    container_name: $REDIS_HOST2
    image: $REDIS_IMAGE
    volumes:
      - ./server/docker/redis/data/node2:/data
    ports:
      - $REDIS_PORT2:$REDIS_PORT2
    networks:
      - backend
    command: |
      sh -c 'redis-server \
        --requirepass $REDIS_PASSWORD \
        --masterauth $REDIS_PASSWORD \
        --port $REDIS_PORT2 \
        --cluster-enabled yes \
        --cluster-node-timeout 5000 \
        --appendonly yes'

  redis-node3:
    <<: *shared-settings
    container_name: $REDIS_HOST3
    image: $REDIS_IMAGE
    volumes:
      - ./server/docker/redis/data/node3:/data
    ports:
      - $REDIS_PORT3:$REDIS_PORT3
    networks:
      - backend
    command: |
      sh -c 'redis-server \
        --requirepass $REDIS_PASSWORD \
        --masterauth $REDIS_PASSWORD \
        --port $REDIS_PORT3 \
        --cluster-enabled yes \
        --cluster-node-timeout 5000 \
        --appendonly yes'

  redis-node4:
    <<: *shared-settings
    container_name: $REDIS_HOST4
    image: $REDIS_IMAGE
    volumes:
      - ./server/docker/redis/data/node4:/data
    ports:
      - $REDIS_PORT4:$REDIS_PORT4
    networks:
      - backend
    command: |
      sh -c 'redis-server \
        --requirepass $REDIS_PASSWORD \
        --masterauth $REDIS_PASSWORD \
        --port $REDIS_PORT4 \
        --cluster-enabled yes \
        --cluster-node-timeout 5000 \
        --appendonly yes'

  redis-node5:
    <<: *shared-settings
    container_name: $REDIS_HOST5
    image: $REDIS_IMAGE
    volumes:
      - ./server/docker/redis/data/node5:/data
    ports:
      - $REDIS_PORT5:$REDIS_PORT5
    networks:
      - backend
    command: |
      sh -c 'redis-server \
        --requirepass $REDIS_PASSWORD \
        --masterauth $REDIS_PASSWORD \
        --port $REDIS_PORT5 \
        --cluster-enabled yes \
        --cluster-node-timeout 5000 \
        --appendonly yes'

  redis-node6:
    <<: *shared-settings
    container_name: $REDIS_HOST6
    image: $REDIS_IMAGE
    volumes:
      - ./server/docker/redis/data/node6:/data
    ports:
      - $REDIS_PORT6:$REDIS_PORT6
    networks:
      - backend
    command: |
      sh -c 'redis-server \
        --requirepass $REDIS_PASSWORD \
        --masterauth $REDIS_PASSWORD \
        --port $REDIS_PORT6 \
        --cluster-enabled yes \
        --cluster-node-timeout 5000 \
        --appendonly yes'
